/*
 * Copyright 2024 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(pulse_detector.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(db5f2d61185dcd3d12fbbd20dc7e8d2f)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/dme/pulse_detector.h>
// pydoc.h is automatically generated in the build directory
#include <pulse_detector_pydoc.h>

void bind_pulse_detector(py::module& m)
{

    using pulse_detector = ::gr::dme::pulse_detector;


    py::class_<pulse_detector,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<pulse_detector>>(m, "pulse_detector", D(pulse_detector))

        .def(py::init(&pulse_detector::make),
             py::arg("window_size"),
             py::arg("threshold"),
             py::arg("noise_alpha"),
             D(pulse_detector, make))


        .def("threshold", &pulse_detector::threshold, D(pulse_detector, threshold))


        .def("noise_alpha", &pulse_detector::noise_alpha, D(pulse_detector, noise_alpha))


        .def("set_threshold",
             &pulse_detector::set_threshold,
             py::arg("threshold"),
             D(pulse_detector, set_threshold))


        .def("set_noise_alpha",
             &pulse_detector::set_noise_alpha,
             py::arg("noise_alpha"),
             D(pulse_detector, set_noise_alpha))

        ;


    m.def("pulse_key", &::gr::dme::pulse_key, D(pulse_key));
}
